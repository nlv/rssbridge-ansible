server {
        server_name {{ hostname }};

	# Don't remove this: we need this for certbot to work, presumably
        location /.well-known {
	    root /var/www/html;
        }

	server_name {{ hostname }}; # managed by Certbot

	# This handles the SSL termination
	# listen 443 ssl; # managed by Certbot
	# ssl_certificate /etc/letsencrypt/live/{{ hostname }}/fullchain.pem; # managed by Certbot
	# ssl_certificate_key /etc/letsencrypt/live/{{ hostname }}/privkey.pem; # managed by Certbot
	# include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
	# ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

	# This is the configuration which proxies requests to nginx to a socket Discourse container
	# provides
	location / {
	    proxy_pass http://localhost:3000;
	    proxy_set_header Host $http_host;
	    proxy_http_version 1.1;
	    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	    proxy_set_header X-Forwarded-Proto $scheme;
	    proxy_set_header X-Real-IP $remote_addr;

		proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
	}

	listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/{{ hostname }}/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/{{ hostname }}/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

# This handles redirection from http to https, generally nice to have
server {
    listen 80 ;
    return 301 https://$host$request_uri;
    server_name {{ hostname }};
    return 404; # managed by Certbot
}
